import createMiddleware from "next-intl/middleware";
import { NextResponse, NextRequest } from "next/server";
import { locales, defaultLocale, localePrefix } from "./config";

export function middleware(req: NextRequest) {
  const pathname = req.nextUrl.pathname;
  const url = new URL(req.url);
  const hostname = url.hostname;

  // --- üîÅ 301 —Ä–µ–¥—ñ—Ä–µ–∫—Ç –∑ www –Ω–∞ canonical –¥–æ–º–µ–Ω ---
  if (hostname.startsWith("www.")) {
    const newUrl = new URL(req.url);
    newUrl.hostname = hostname.replace("www.", "");
    return NextResponse.redirect(newUrl.toString(), 301);
  }

  // --- üîÅ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ /home –∞–±–æ /en/home ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏–º–æ –Ω–∞ –∫–æ—Ä—ñ–Ω—å ---
  if (pathname === "/home") {
    const newUrl = req.nextUrl.clone();
    newUrl.pathname = "/";
    return NextResponse.redirect(newUrl, 301);
  } else if (pathname === "/en/home") {
    const newUrl = req.nextUrl.clone();
    newUrl.pathname = "/en";
    return NextResponse.redirect(newUrl, 301);
  }

  // --- üåç –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ ---
  const intlMiddleware = createMiddleware({
    locales,
    defaultLocale,
    localePrefix,
  });

  const response = intlMiddleware(req);

  // --- üß± –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–æ–º–µ–Ω—ñ–≤ ---
  if (hostname.startsWith("test")) {
    response.headers.set("X-Robots-Tag", "noindex, nofollow");
  }

  return response;
}

export const config = {
  matcher: ["/((?!api|_next|.*\\..*).*)"],
};
